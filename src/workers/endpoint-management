const ENDPOINTS = {
  'foundation_dns_queries': {
    handler: handleFoundationDNSQueries
  },
  'data_transfer_total': {
    handler: handleDataTransferTotal
  },
  'china_ntw_data_transfer': {
    handler: handleChinaNtwDataTransfer
  },
  'request': {
    handler: handleRequest
  },
  'bot_management_request': {
    handler: handleBotManagementRequest
  },
  'workers_std_requests': {
    handler: handleWorkersStdRequests
  },
  'workers_std_cpu': {
    handler: handleWorkersStdCPU
  },
  'workers_kv_read': {
    handler: handleWorkersKVRead
  },
  'workers_kv_storage': {
    handler: handleWorkersKVStorage
  },
  'workers_kv_write_list_delete': {
    handler: handleWorkersKVWriteListDelete
  },
  'stream_minutes_stored': {
    handler: handleStreamMinutesStored
  },
  'stream_minutes_viewed': {
    handler: handleStreamMinutesViewed
  },
  'images_delivered': {
    handler: handleImagesDelivered
  },
  'images_stored': {
    handler: handleImagesStored
  },
  'images_unique_transformations': {
    handler: handleImagesUniqueTransformations
  }
};

const AUTH_EMAIL = 'hakang@mz.co.kr';
const AUTH_KEY = 'f6f652701a00dc80fc3c5e764adb1b84461e3';

addEventListener('fetch', event => {
  event.respondWith(handleRequest(event.request));
});

async function handleRequest(request) {
  const corsHeaders = {
    'Access-Control-Allow-Origin': '*',
    'Access-Control-Allow-Methods': 'GET, POST, OPTIONS',
    'Access-Control-Allow-Headers': 'Content-Type',
  };

  if (request.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  if (request.method === 'GET') {
    // Handle GET request for endpoints
    const endpoints = Object.keys(ENDPOINTS).map(key => ({
      value: key,
      label: key.replace(/_/g, ' ').replace(/\w\S*/g, (txt) => txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase())
    }));
    return new Response(JSON.stringify(endpoints), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' }
    });
  }

  if (request.method === 'POST') {
    // Handle POST request for data retrieval
    try {
      const { accountTag, zoneId, startDate, endDate, endpoints } = await request.json();
      
      if (!accountTag || !zoneId || !startDate || !endDate || !endpoints || endpoints.length === 0) {
        return new Response('Missing required parameters', { 
          status: 400,
          headers: corsHeaders
        });
      }

      const results = {};
      for (const endpoint of endpoints) {
        const endpointConfig = ENDPOINTS[endpoint];
        if (endpointConfig) {
          results[endpoint] = await endpointConfig.handler(accountTag, zoneId, { get: (key) => key === 'start_date' ? startDate : endDate });
        }
      }

      return new Response(JSON.stringify(results), {
        headers: { ...corsHeaders, 'Content-Type': 'application/json' }
      });
    } catch (error) {
      return new Response(`Error: ${error.message}`, { 
        status: 500,
        headers: corsHeaders
      });
    }
  }

  return new Response('Method not allowed', { status: 405, headers: corsHeaders });
}

async function performGraphQLRequest(query, variables = {}) {
  const response = await fetch('https://api.cloudflare.com/client/v4/graphql', {
    method: 'POST',
    headers: {
      'X-Auth-Email': AUTH_EMAIL,
      'X-Auth-Key': AUTH_KEY,
      'Content-Type': 'application/json'
    },
    body: JSON.stringify({ query, variables })
  });
  return await response.json();
}

// Endpoint handler functions
async function handleDataTransferTotal(accountTag, zoneId, params) {
  const query = `
    query getAccount($accountTag: String!) {
      viewer {
        accounts(filter: { accountTag: $accountTag }) {
          accountName
          accountType
          createdOn
          settings {
            enforceTwoFactor
          }
        }
      }
    }
  `;
  return await performGraphQLRequest(query, { accountTag });
}

async function handleFoundationDNSQueries(accountTag, zoneId, params) {
  const query = `
    query getDNSQueries($zoneId: String!, $start: String!, $end: String!) {
      viewer {
        zones(filter: { zoneTag: $zoneId }) {
          dns {
            analytics {
              queries(filter: { date_geq: $start, date_leq: $end }) {
                count
                queryTypes {
                  queryType
                  count
                }
              }
            }
          }
        }
      }
    }
  `;
  return await performGraphQLRequest(query, { 
    zoneId, 
    start: params.get('start_date'), 
    end: params.get('end_date') 
  });
}

async function handleChinaNtwDataTransfer(accountTag, zoneId, params) {
  const query = `
    query getChinaDataTransfer($zoneId: String!, $start: String!, $end: String!) {
      viewer {
        zones(filter: {zoneTag: $zoneId}) {
          httpRequests1dGroups(limit: 1, filter: {date_geq: $start, date_leq: $end, clientCountryName: "CN"}) {
            sum {
              bytes
            }
          }
        }
      }
    }
  `;
  return await performGraphQLRequest(query, { 
    zoneId, 
    start: params.get('start_date'), 
    end: params.get('end_date') 
  });
}

async function handleBotManagementRequest(accountTag, zoneId, params) {
  const query = `
    query getBotManagementRequests($zoneId: String!, $start: String!, $end: String!) {
      viewer {
        zones(filter: {zoneTag: $zoneId}) {
          botManagementAnalytics(filter: {date_geq: $start, date_leq: $end}) {
            total {
              requests
            }
          }
        }
      }
    }
  `;
  return await performGraphQLRequest(query, { 
    zoneId, 
    start: params.get('start_date'), 
    end: params.get('end_date') 
  });
}

async function handleWorkersStdRequests(accountTag, zoneId, params) {
  const query = `
    query getWorkersRequests($accountTag: String!, $start: String!, $end: String!) {
      viewer {
        accounts(filter: {accountTag: $accountTag}) {
          workersInvocations(filter: {date_geq: $start, date_leq: $end}) {
            sum {
              requests
            }
          }
        }
      }
    }
  `;
  return await performGraphQLRequest(query, { 
    accountTag, 
    start: params.get('start_date'), 
    end: params.get('end_date') 
  });
}

async function handleWorkersStdCPU(accountTag, zoneId, params) {
  const query = `
    query getWorkersCPU($accountTag: String!, $start: String!, $end: String!) {
      viewer {
        accounts(filter: {accountTag: $accountTag}) {
          workersInvocations(filter: {date_geq: $start, date_leq: $end}) {
            sum {
              cpuTime
            }
          }
        }
      }
    }
  `;
  return await performGraphQLRequest(query, { 
    accountTag, 
    start: params.get('start_date'), 
    end: params.get('end_date') 
  });
}

async function handleWorkersKVRead(accountTag, zoneId, params) {
  const query = `
    query getWorkersKVRead($accountTag: String!, $start: String!, $end: String!) {
      viewer {
        accounts(filter: {accountTag: $accountTag}) {
          workersInvocations(filter: {date_geq: $start, date_leq: $end}) {
            sum {
              kvRequests
            }
          }
        }
      }
    }
  `;
  return await performGraphQLRequest(query, { 
    accountTag, 
    start: params.get('start_date'), 
    end: params.get('end_date') 
  });
}

async function handleWorkersKVStorage(accountTag, zoneId, params) {
  const query = `
    query getWorkersKVStorage($accountTag: String!, $start: String!, $end: String!) {
      viewer {
        accounts(filter: {accountTag: $accountTag}) {
          workersKvProperties {
            kvUsage(filter: {date_geq: $start, date_leq: $end}) {
              sum {
                storedBytes
              }
            }
          }
        }
      }
    }
  `;
  return await performGraphQLRequest(query, { 
    accountTag, 
    start: params.get('start_date'), 
    end: params.get('end_date') 
  });
}

async function handleWorkersKVWriteListDelete(accountTag, zoneId, params) {
  const query = `
    query getWorkersKVWriteListDelete($accountTag: String!, $start: String!, $end: String!) {
      viewer {
        accounts(filter: {accountTag: $accountTag}) {
          workersKvProperties {
            kvUsage(filter: {date_geq: $start, date_leq: $end}) {
              sum {
                writtenBytes
                deletedKeys
                listedKeys
              }
            }
          }
        }
      }
    }
  `;
  return await performGraphQLRequest(query, { 
    accountTag, 
    start: params.get('start_date'), 
    end: params.get('end_date') 
  });
}

async function handleStreamMinutesStored(accountTag, zoneId, params) {
  const query = `
    query getStreamMinutesStored($accountTag: String!, $start: String!, $end: String!) {
      viewer {
        accounts(filter: {accountTag: $accountTag}) {
          stream {
            minutesStored(filter: {date_geq: $start, date_leq: $end}) {
              sum {
                minutes
              }
            }
          }
        }
      }
    }
  `;
  return await performGraphQLRequest(query, { 
    accountTag, 
    start: params.get('start_date'), 
    end: params.get('end_date') 
  });
}

async function handleStreamMinutesViewed(accountTag, zoneId, params) {
  const query = `
    query getStreamMinutesViewed($accountTag: String!, $start: String!, $end: String!) {
      viewer {
        accounts(filter: {accountTag: $accountTag}) {
          stream {
            minutesDelivered(filter: {date_geq: $start, date_leq: $end}) {
              sum {
                minutes
              }
            }
          }
        }
      }
    }
  `;
  return await performGraphQLRequest(query, { 
    accountTag, 
    start: params.get('start_date'), 
    end: params.get('end_date') 
  });
}

async function handleImagesDelivered(accountTag, zoneId, params) {
  const query = `
    query getImagesDelivered($accountTag: String!, $start: String!, $end: String!) {
      viewer {
        accounts(filter: {accountTag: $accountTag}) {
          imagesAdaptiveGroups(filter: {date_geq: $start, date_leq: $end}) {
            sum {
              requests
            }
          }
        }
      }
    }
  `;
  return await performGraphQLRequest(query, { 
    accountTag, 
    start: params.get('start_date'), 
    end: params.get('end_date') 
  });
}

async function handleImagesStored(accountTag, zoneId, params) {
  const query = `
    query getImagesStored($accountTag: String!, $start: String!, $end: String!) {
      viewer {
        accounts(filter: {accountTag: $accountTag}) {
          imagesAdaptiveGroups(filter: {date_geq: $start, date_leq: $end}) {
            sum {
              bytes
            }
          }
        }
      }
    }
  `;
  return await performGraphQLRequest(query, { 
    accountTag, 
    start: params.get('start_date'), 
    end: params.get('end_date') 
  });
}

async function handleImagesUniqueTransformations(accountTag, zoneId, params) {
  const query = `
    query getImagesUniqueTransformations($accountTag: String!, $start: String!, $end: String!) {
      viewer {
        accounts(filter: {accountTag: $accountTag}) {
          imagesAdaptiveGroups(filter: {date_geq: $start, date_leq: $end}) {
            count
          }
        }
      }
    }
  `;
  return await performGraphQLRequest(query, { 
    accountTag, 
    start: params.get('start_date'), 
    end: params.get('end_date') 
  });
}
